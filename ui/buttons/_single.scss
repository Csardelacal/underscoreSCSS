
.button {
	/*
	 * We default the text color of buttons to white, since most buttons will have
	 * a darker solid background that fills the button.
	 */
	color: $white;

	/*
	 * Buttons are inline elements, which means that we wish to have them behave accordingly
	 * in the context of inline components.
	 * 
	 * CSS makes it extraordinarily challenging to mix static and inline-block elements, while
	 * maintaining a good vertical alignment. Most of the time the baseline will behave improperly
	 * and the elements will shift.
	 * 
	 * While I understand that this is a challenge that something like CSS just faces, we like 
	 * to handle all our elements that are to be displayed as inline blocks with a static height,
	 * so they become better behaved and are able to align vertically with the rest.
	 */
	display: inline-block;
	vertical-align: middle;
	height: $buttonHeight;
	line-height: $buttonHeight - 2 * map-get($buttonPadding, "y") - 2 * $button-border-width;
	font-size: ($buttonHeight - 2 * map-get($buttonPadding, "y") - 2 * $button-border-width) / 1.4;


	/*
	 * Buttons are always clickable elements, and therefore should indicate their clickability to the
	 * user by setting setting the cursor to a clicking hand.
	 */
	cursor: pointer;
	
	background: linear-gradient(90deg, #396afc, #2948ff);
	border-radius: $button-border-radius;
	border: transparent solid $button-border-width;
	padding: map-get($buttonPadding, "y") map-get($buttonPadding, "x");
	font-weight: bolder;
	text-decoration: none;
	transition: background-color .3s ease, border-color .3s ease;

	&:hover {
		text-decoration: none;
	}
	
	
	&.borderless {
		background: none;
		color: #652CA5;
		font-weight: bold;
		border: solid  $button-border-width transparent;
	}
	
	&.outline {
		background: none;
		color: #652CA5;
		border: solid $button-border-width #652CA5;
		font-weight: bold;
		box-shadow: none;
		
		&.fill-on-hover:hover, .solid {
			background: #652CA5;
			color: #FFF;
			border: solid $button-border-width #652CA5;
		}
	}
	
	@each $caption, $color in $colors {
		
		&.outline.button-color-#{$caption} {
			color: $color;
			border: solid $button-border-width $color;
		}

		&.solid.button-color-#{$caption},
		&.solid.hover-fill-#{$caption}:hover,
		&.outline.hover-fill-#{$caption}:hover,
		&.borderless.hover-fill-#{$caption}:hover {
			background: $color;
			color: #FFF;
			border: solid $button-border-width $color;
		}
	
		&.borderless.button-color-#{$caption} {
			color: $color;
		}
	}
	
	&.xsmall {
		font-size: ($buttonHeight - 2 * map-get($buttonPadding, "y") - 2 * $button-border-width) / 1.4 * .50;
		line-height: ($buttonHeight - 2 * map-get($buttonPadding, "y") - 2 * $button-border-width) * .50;
		padding: map-get($buttonPadding, "y") * .50 map-get($buttonPadding, "x") * .75;
		border-radius: $button-border-small-radius;
		height: $buttonHeight * .50;
	}
	
	&.small {
		height: $buttonHeight * .6;
		font-size: ($buttonHeight - 2 * map-get($buttonPadding, "y") - 2 * $button-border-width) / 1.4 * .6;
		line-height: ($buttonHeight - 2 * map-get($buttonPadding, "y") - 2 * $button-border-width) * .66;
		padding: map-get($buttonPadding, "y") * .6 map-get($buttonPadding, "x") * .85;
		border-radius: $button-border-small-radius;
	}
	
	&.medium {
		font-size: ($buttonHeight - 2 * map-get($buttonPadding, "y") - 2 * $button-border-width) / 1.4 * .8;
		line-height: ($buttonHeight - 2 * map-get($buttonPadding, "y") - 2 * $button-border-width) * .8;
		padding: map-get($buttonPadding, "y") * .8 map-get($buttonPadding, "x") * .8;
		border-radius: $button-border-radius;
		height: $buttonHeight * .8;
	}
}
